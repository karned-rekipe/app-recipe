/**
 * Exemple d'utilisation des services refactoris√©s selon le SRP
 * D√©montre l'utilisation des services avec masquage s√©curis√© des tokens
 */

import { 
  authApiService,
  secureStorageService,
  licenseApiService,
  recipeApiService,
  authenticatedApiService
} from '../services';
import type { LoginCredentials } from '../types/Auth';

/**
 * Exemple complet d'authentification et r√©cup√©ration de recettes
 */
export class ExampleUsageServices {
  
  /**
   * Flux complet d'authentification
   */
  async authenticateUser(credentials: LoginCredentials) {
    try {
      console.log('üöÄ [Example] D√©but du processus d\'authentification');
      
      // 1. Connexion via le service d'authentification (d√©j√† SRP)
      const authResponse = await authApiService.login(credentials);
      console.log('‚úÖ [Example] Connexion r√©ussie');
      
      // 2. Stockage s√©curis√© des tokens (service refactoris√© SRP)
      await secureStorageService.storeTokens(authResponse.tokens);
      console.log('‚úÖ [Example] Tokens stock√©s de mani√®re s√©curis√©e');
      
      return authResponse.tokens;
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur d\'authentification:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©ration et gestion des licences
   */
  async getUserLicenseInfo(accessToken: string) {
    try {
      console.log('üîç [Example] R√©cup√©ration des informations de licence');
      
      // Service de licence (d√©j√† SRP) avec logs s√©curis√©s
      const licenses = await licenseApiService.getUserLicenses(accessToken);
      console.log('‚úÖ [Example] Licences r√©cup√©r√©es:', licenses.length);
      
      // Recherche de la licence pour les recettes
      const recipeLicense = await licenseApiService.getRecipeLicense(accessToken);
      
      if (!recipeLicense) {
        throw new Error('Aucune licence recette valide trouv√©e');
      }
      
      console.log('‚úÖ [Example] Licence recette trouv√©e:', {
        uuid: recipeLicense.uuid.substring(0, 8) + '...',
        name: recipeLicense.name
      });
      
      return { licenses, recipeLicense };
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur de licence:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©ration des recettes avec le service refactoris√©
   */
  async fetchRecipes() {
    try {
      console.log('üç≥ [Example] R√©cup√©ration des recettes');
      
      // 1. R√©cup√©ration des tokens stock√©s (service refactoris√© SRP)
      const tokens = await secureStorageService.getTokens();
      if (!tokens) {
        throw new Error('Aucun token d\'authentification trouv√©');
      }
      
      // 2. V√©rification de l'expiration (service refactoris√© SRP)
      const isExpired = await secureStorageService.isTokenExpired();
      if (isExpired) {
        throw new Error('Token expir√©, reconnexion n√©cessaire');
      }
      
      // 3. R√©cup√©ration de la licence
      const recipeLicense = await licenseApiService.getRecipeLicense(tokens.access_token);
      if (!recipeLicense) {
        throw new Error('Licence recette requise');
      }
      
      // 4. Appel API recettes (service refactoris√© SRP)
      const response = await recipeApiService.getRecipes(tokens, recipeLicense);
      
      if (response.status === 'success' && response.data) {
        console.log('‚úÖ [Example] Recettes r√©cup√©r√©es:', response.data.length);
        return response.data;
      } else {
        throw new Error(response.error || 'Erreur lors de la r√©cup√©ration des recettes');
      }
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur r√©cup√©ration recettes:', error);
      throw error;
    }
  }

  /**
   * Exemple d'utilisation du service API authentifi√© g√©n√©rique
   */
  async makeCustomApiCall(endpoint: string, method: 'GET' | 'POST' = 'GET', body?: any) {
    try {
      console.log(`üåê [Example] Appel API personnalis√©: ${method} ${endpoint}`);
      
      // 1. R√©cup√©ration des tokens (service refactoris√© SRP)
      const tokens = await secureStorageService.getTokens();
      if (!tokens) {
        throw new Error('Authentification requise');
      }
      
      // 2. R√©cup√©ration de la licence si n√©cessaire
      const license = await licenseApiService.getRecipeLicense(tokens.access_token);
      
      // 3. Appel via le service authentifi√© (service refactoris√© SRP)
      const response = method === 'GET' 
        ? await authenticatedApiService.get(endpoint, tokens, license)
        : await authenticatedApiService.post(endpoint, body, tokens, license);
      
      console.log('‚úÖ [Example] Appel API r√©ussi:', response.status);
      return response;
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur appel API:', error);
      throw error;
    }
  }

  /**
   * D√©connexion s√©curis√©e
   */
  async logout() {
    try {
      console.log('üö™ [Example] D√©connexion en cours');
      
      // Suppression s√©curis√©e des tokens (service refactoris√© SRP)
      await secureStorageService.clearTokens();
      
      console.log('‚úÖ [Example] D√©connexion r√©ussie, tokens supprim√©s');
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur lors de la d√©connexion:', error);
      throw error;
    }
  }

  /**
   * Rafra√Æchissement automatique des tokens
   */
  async refreshTokensIfNeeded() {
    try {
      console.log('üîÑ [Example] V√©rification de l\'expiration des tokens');
      
      // 1. V√©rification de l'expiration (service refactoris√© SRP)
      const isExpired = await secureStorageService.isTokenExpired();
      
      if (!isExpired) {
        console.log('‚úÖ [Example] Tokens encore valides');
        return await secureStorageService.getTokens();
      }
      
      console.log('‚è∞ [Example] Tokens expir√©s, rafra√Æchissement n√©cessaire');
      
      // 2. R√©cup√©ration des tokens actuels
      const currentTokens = await secureStorageService.getTokens();
      if (!currentTokens?.refresh_token) {
        throw new Error('Refresh token manquant, reconnexion compl√®te n√©cessaire');
      }
      
      // 3. Rafra√Æchissement (service d'auth d√©j√† SRP)
      const newTokens = await authApiService.refreshToken(currentTokens.refresh_token);
      
      // 4. Stockage des nouveaux tokens (service refactoris√© SRP)
      await secureStorageService.storeTokens(newTokens);
      
      console.log('‚úÖ [Example] Tokens rafra√Æchis avec succ√®s');
      return newTokens;
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur rafra√Æchissement tokens:', error);
      // En cas d'erreur, supprimer les tokens corrompus
      await secureStorageService.clearTokens();
      throw error;
    }
  }

  /**
   * Flux complet : connexion ‚Üí r√©cup√©ration recettes ‚Üí d√©connexion
   */
  async completeWorkflow(credentials: LoginCredentials) {
    try {
      console.log('üéØ [Example] D√©but du flux complet');
      
      // 1. Authentification
      await this.authenticateUser(credentials);
      
      // 2. R√©cup√©ration des licences
      const tokens = await secureStorageService.getTokens();
      if (!tokens) throw new Error('Tokens manquants apr√®s authentification');
      
      await this.getUserLicenseInfo(tokens.access_token);
      
      // 3. R√©cup√©ration des recettes
      const recipes = await this.fetchRecipes();
      
      console.log('‚úÖ [Example] Flux complet r√©ussi:', {
        recipesCount: recipes.length
      });
      
      return recipes;
      
    } catch (error) {
      console.error('‚ùå [Example] Erreur dans le flux complet:', error);
      
      // Nettoyage en cas d'erreur
      await this.logout();
      throw error;
    }
  }
}

// Export de l'instance pour utilisation
export const exampleUsage = new ExampleUsageServices();

/**
 * Exemples d'utilisation rapide
 */
export const quickExamples = {
  
  // Authentification simple
  async simpleAuth(username: string, password: string) {
    return exampleUsage.authenticateUser({ username, password });
  },
  
  // R√©cup√©ration rapide des recettes
  async quickRecipes() {
    return exampleUsage.fetchRecipes();
  },
  
  // V√©rification du statut d'authentification
  async checkAuthStatus() {
    const tokens = await secureStorageService.getTokens();
    const isExpired = await secureStorageService.isTokenExpired();
    
    return {
      isAuthenticated: !!tokens,
      isExpired,
      needsRefresh: isExpired && !!tokens
    };
  }
};
