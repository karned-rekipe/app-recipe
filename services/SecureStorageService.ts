/**
 * Service de stockage s√©curis√© selon le principe SRP
 * Responsabilit√© unique : Orchestrer le stockage de tokens en utilisant le meilleur adaptateur disponible
 * 
 * Architecture:
 * - Utilise une strat√©gie de fallback (SecureStore ‚Üí AsyncStorage chiffr√©)
 * - D√©l√®gue les responsabilit√©s sp√©cifiques aux services appropri√©s
 * - Respecte le principe de responsabilit√© unique
 */

import type { AuthTokens } from '../types/Auth';
import type { ITokenStorageAdapter } from './interfaces/ITokenStorageAdapter';
import type { ITokenValidator } from './interfaces/ITokenValidator';

import { StorageDetectionService } from './storage/StorageDetectionService';
import { SimpleCryptoService } from './crypto/SimpleCryptoService';
import { TokenValidator } from './validation/TokenValidator';
import { SecureStoreAdapter } from './adapters/SecureStoreAdapter';
import { AsyncStorageAdapter } from './adapters/AsyncStorageAdapter';

// Erreur personnalis√©e pour le stockage
export class StorageError extends Error {
  constructor(message: string, public originalError?: string) {
    super(message);
    this.name = 'StorageError';
  }
}

/**
 * Service principal de stockage de tokens avec architecture modulaire
 */
class SecureStorageService {
  private readonly storageAdapters: ITokenStorageAdapter[];
  private readonly tokenValidator: ITokenValidator;

  constructor() {
    // Injection des d√©pendances
    const storageDetection = new StorageDetectionService();
    const cryptoService = new SimpleCryptoService();
    this.tokenValidator = new TokenValidator();

    // Configuration des adaptateurs par ordre de pr√©f√©rence
    this.storageAdapters = [
      new SecureStoreAdapter(storageDetection),
      new AsyncStorageAdapter(cryptoService, storageDetection)
    ];
  }

  /**
   * Stocke les tokens en utilisant le premier adaptateur disponible
   */
  async storeTokens(tokens: AuthTokens): Promise<void> {
    // Validation pr√©alable
    if (!this.tokenValidator.validateTokens(tokens)) {
      throw new Error('Tokens invalides: access_token et refresh_token doivent √™tre des cha√Ænes de caract√®res non vides');
    }

    console.log('üîê [SecureStorage] D√©but du stockage des tokens', {
      hasAccess: !!tokens.access_token,
      hasRefresh: !!tokens.refresh_token,
      accessLength: tokens.access_token.length,
      refreshLength: tokens.refresh_token.length
    });

    // Tentative de stockage avec le premier adaptateur disponible
    for (const adapter of this.storageAdapters) {
      try {
        if (await adapter.isAvailable()) {
          await adapter.storeTokens(tokens);
        console.log(`‚úÖ [SecureStorage] Tokens stock√©s via ${adapter.name}`);
        return;
      } else {
        console.log(`‚ö†Ô∏è  [SecureStorage] ${adapter.name} non disponible, passage au suivant`);
      }
    } catch (error) {
      console.warn(`‚ùå [SecureStorage] √âchec ${adapter.name}, tentative suivante:`, error);
      // Continue avec l'adaptateur suivant
    }
  }

  throw new Error('Aucun adaptateur de stockage disponible');
}  /**
   * R√©cup√®re les tokens depuis le premier adaptateur qui en contient
   */
  async getTokens(): Promise<AuthTokens | null> {
    console.log('üìñ [SecureStorage] R√©cup√©ration des tokens');

    for (const adapter of this.storageAdapters) {
      try {
        if (await adapter.isAvailable()) {
          const tokens = await adapter.getTokens();
          if (tokens && this.tokenValidator.validateTokens(tokens)) {
            console.log(`‚úÖ [SecureStorage] Tokens r√©cup√©r√©s via ${adapter.name}`);
            return tokens;
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  [SecureStorage] Erreur ${adapter.name}:`, error);
        // Continue avec l'adaptateur suivant
      }
    }

    console.log('‚ÑπÔ∏è  [SecureStorage] Aucun token valide trouv√©');
    return null;
  }

  /**
   * V√©rifie si les tokens stock√©s ont expir√©
   */
  async isTokenExpired(): Promise<boolean> {
    try {
      const tokens = await this.getTokens();
      return this.tokenValidator.areTokensExpired(tokens);
    } catch (error) {
      console.error('‚ùå [SecureStorage] Erreur lors de la v√©rification d\'expiration:', error);
      return true; // En cas d'erreur, consid√©rer comme expir√© pour forcer la reconnexion
    }
  }

  /**
   * Supprime tous les tokens de tous les adaptateurs
   */
  async clearTokens(): Promise<void> {
    console.log('üóëÔ∏è  [SecureStorage] Suppression de tous les tokens');

    const errors: string[] = [];

    // Suppression sur tous les adaptateurs pour assurer un nettoyage complet
    for (const adapter of this.storageAdapters) {
      try {
        if (await adapter.isAvailable()) {
          await adapter.clearTokens();
          console.log(`‚úÖ [SecureStorage] Tokens supprim√©s de ${adapter.name}`);
        }
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : String(error);
        errors.push(`${adapter.name}: ${errorMsg}`);
        console.warn(`‚ö†Ô∏è  [SecureStorage] Erreur suppression ${adapter.name}:`, error);
      }
    }

    if (errors.length === this.storageAdapters.length) {
      throw new Error(`Erreur lors de la suppression: ${errors.join(', ')}`);
    }

    console.log('‚úÖ [SecureStorage] Nettoyage termin√©');
  }
}

// Export de l'instance singleton pour la compatibilit√© avec l'API existante
export const secureStorageService = new SecureStorageService();
